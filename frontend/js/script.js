// Espera o DOM carregar completamente antes de executar o script
document.addEventListener('DOMContentLoaded', () => {
    // --- Constantes & Estado Global ---
    const LOCAL_STORAGE_BASE_KEY = 'abaplay.v3'; // Chave simplificada
    const API_BASE_URL = 'https://abaplay-backend.onrender.com/api'; // URL base do nosso backend

    // Variáveis de estado global
    let allPrograms = [];
    let patients = []; // Pacientes do usuário logado (virá da API)
    let selectedPatient = null;
    let selectedProgramForProgress = null;
    let currentView = 'clients-view';
    let progressChartInstance = null;
    let consolidatedChartInstances = {}; // Mantido para o modal visual
    let isAuthenticated = false;
    let currentUser = null;
    let authToken = null;

    // --- Seletores de Elementos DOM (Mantidos como antes) ---
    // Login
    const loginModal = document.getElementById('login-modal');
    const loginForm = document.getElementById('login-form');
    const usernameInput = document.getElementById('username');
    const passwordInput = document.getElementById('password');
    const loginErrorMessage = document.getElementById('login-error-message');
    // Interface Principal e Navegação
    const appMainInterface = document.getElementById('app-main-interface');
    const topNavLinks = document.querySelectorAll('nav .nav-link');
    const views = document.querySelectorAll('#main-content-area .view');
    const mainContentArea = document.getElementById('main-content-area');
    const loggedInUsernameSpan = document.getElementById('logged-in-username');
    const userAvatarDiv = document.getElementById('user-avatar');
    const logoutButton = document.getElementById('logout-button');
    const currentClientIndicator = document.getElementById('current-client-indicator');
    // Sidebar Geral e Contextual
    const contextualSidebar = document.getElementById('contextual-sidebar');
    const sidebarSections = contextualSidebar.querySelectorAll('.sidebar-section');
    // Sidebar e Painéis de Clientes
    const clientSidebarSection = document.getElementById('sidebar-content-clients');
    const clientListUl = document.getElementById('client-list');
    const noClientsMessageLi = clientListUl.querySelector('.no-clients-message');
    const clientSearchInput = document.getElementById('client-search');
    const showAddClientFormBtn = document.getElementById('show-add-client-form-btn');
    const patientCountIndicator = document.getElementById('patient-count-indicator');
    const addClientPanel = document.getElementById('add-client-panel');
    const addClientForm = document.getElementById('add-client-form');
    const addClientFormTitle = addClientPanel.querySelector('h2');
    const addClientFormSubmitBtn = addClientForm.querySelector('button[type="submit"]');
    const closeAddClientPanelBtn = document.getElementById('close-add-client-panel-btn');
    const clientNameInput = document.getElementById('client-name');
    const clientDobInput = document.getElementById('client-dob');
    const clientDiagnosisInput = document.getElementById('client-diagnosis');
    const clientNotesInput = document.getElementById('client-notes');
    const clientDetailsPanel = document.getElementById('client-details-panel');
    const noClientSelectedPlaceholder = document.getElementById('no-client-selected-placeholder');
    const triggerAddClientFormBtn = document.getElementById('trigger-add-client-form-btn');
    // Detalhes do Cliente
    const detailClientNameSpan = document.getElementById('detail-client-name');
    const detailClientIdSpan = document.getElementById('detail-client-id');
    const detailClientDobSpan = document.getElementById('detail-client-dob');
    const detailClientDiagnosisSpan = document.getElementById('detail-client-diagnosis');
    const detailClientNotesSpan = document.getElementById('detail-client-notes');
    const assignedProgramsListUl = document.getElementById('assigned-programs-list');
    const noAssignedProgramsLi = assignedProgramsListUl.querySelector('.no-assigned-programs');
    const editClientBtn = document.getElementById('edit-client-btn');
    const deleteClientBtn = document.getElementById('delete-client-btn');
    const generateClientGradePdfBtn = document.getElementById('generate-client-grade-pdf');
    const generateClientRecordPdfBtn = document.getElementById('generate-client-record-pdf');
    const generateConsolidatedReportBtn = document.getElementById('generate-consolidated-report-btn'); // Botão que abre o modal
    // Progresso da Sessão
    const sessionProgressSectionDiv = document.getElementById('session-progress-section');
    const progressDetailsAreaDiv = document.getElementById('progress-details-area');
    // Sidebar e Visão de Programas
    const programSidebarSection = document.getElementById('sidebar-content-programs');
    const programSearchInput = document.getElementById('program-search');
    const programCategoriesContainer = document.getElementById('program-categories');
    const programLibraryListDiv = document.getElementById('program-library-list');
    const noProgramsMessage = document.getElementById('no-programs-message');
    const programViewPlaceholder = document.getElementById('program-view-placeholder');
    // Modal de Relatório Consolidado
    const consolidatedReportModal = document.getElementById('consolidated-report-modal');
    const consolidatedReportTitle = document.getElementById('consolidated-report-title');
    const consolidatedReportPrintTitle = document.getElementById('consolidated-report-print-title');
    const consolidatedReportClientNamePrint = document.getElementById('consolidated-report-client-name-print');
    const consolidatedReportClientIdPrint = document.getElementById('consolidated-report-client-id-print');
    const consolidatedChartsContainer = document.getElementById('consolidated-charts-container');
    const printConsolidatedReportBtn = document.getElementById('print-consolidated-report-btn'); // Botão DENTRO do modal
    const closeModalBtns = consolidatedReportModal.querySelectorAll('.close-modal-btn, #close-consolidated-modal-btn');
    // Visão de Anotações
    const notesView = document.getElementById('notes-view');
    const notesViewTextarea = document.getElementById('notes-textarea');
    const saveNotesBtn = document.getElementById('save-notes-btn');
    const notesPlaceholder = notesView.querySelector('.notes-placeholder');
    // Visão Guia de Dicas
    const tipGuideView = document.getElementById('tip-guide-view');
    const tipGuideSidebarSection = document.getElementById('sidebar-content-tip-guide');
    // Dashboard
    const dashboardContent = document.getElementById('dashboard-content');
    const clientDashboardContent = document.getElementById('client-dashboard-content');


    // --- Funções Utilitárias de Autenticação (Mantidas) ---
    function saveAuthToken(token) { localStorage.setItem(`${LOCAL_STORAGE_BASE_KEY}_token`, token); authToken = token; }
    function getAuthToken() { return localStorage.getItem(`${LOCAL_STORAGE_BASE_KEY}_token`); }
    function removeAuthToken() { localStorage.removeItem(`${LOCAL_STORAGE_BASE_KEY}_token`); authToken = null; }
    function saveUserData(userData) { localStorage.setItem(`${LOCAL_STORAGE_BASE_KEY}_user`, JSON.stringify(userData)); currentUser = userData; }
    function getUserData() { const userDataJson = localStorage.getItem(`${LOCAL_STORAGE_BASE_KEY}_user`); try { return userDataJson ? JSON.parse(userDataJson) : null; } catch (e) { console.error("Erro ao parsear dados do usuário:", e); removeUserData(); return null; } }
    function removeUserData() { localStorage.removeItem(`${LOCAL_STORAGE_BASE_KEY}_user`); currentUser = null; }

    // --- Inicialização ---
    function initializeApp() {
        console.log("ABAplay v3.5 (Full-Stack) - Inicializando...");
        loginForm.addEventListener('submit', handleLogin);
        logoutButton.addEventListener('click', handleLogout);
        closeModalBtns.forEach(btn => btn.addEventListener('click', closeConsolidatedReportModal));
        consolidatedReportModal.addEventListener('click', (e) => { if (e.target === consolidatedReportModal) closeConsolidatedReportModal(); });
        // *** MUDANÇA AQUI: O botão de imprimir AGORA chama a geração via jsPDF ***
        printConsolidatedReportBtn.removeEventListener('click', handlePrintConsolidatedReport); // Remove listener antigo se houver
        printConsolidatedReportBtn.addEventListener('click', handlePrintConsolidatedReport); // Adiciona novo listener
        tryRestoringSession();
    }

    // --- Tentativa de Restaurar Sessão (Mantida) ---
    function tryRestoringSession() { authToken = getAuthToken(); currentUser = getUserData(); if (authToken && currentUser) { console.log(`Sessão restaurada para ${currentUser.username}.`); isAuthenticated = true; startAuthenticatedSession(); } else { console.log("Nenhuma sessão ativa. Exibindo login."); showLoginScreen(); } }

    // --- Controle de Estado da Interface (Mantido) ---
    function showLoginScreen() { isAuthenticated = false; currentUser = null; authToken = null; loginModal.classList.remove('hidden'); appMainInterface.classList.add('hidden'); loginForm.reset(); loginErrorMessage.textContent = ''; usernameInput.focus(); }
    function showMainAppScreen() { loginModal.classList.add('hidden'); appMainInterface.classList.remove('hidden'); appMainInterface.classList.add('flex'); }

    // --- Autenticação (Mantida) ---
    async function handleLogin(e) {
        e.preventDefault();
        const username = usernameInput.value.trim();
        const password = passwordInput.value;
        loginErrorMessage.textContent = '';
        const submitButton = loginForm.querySelector('button[type="submit"]');
        submitButton.disabled = true;
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Entrando...';
        try {
            const response = await fetch(`${API_BASE_URL}/auth/login`, { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ username, password }), });
            const data = await response.json();
            if (response.ok) { console.log('Login bem-sucedido:', data); isAuthenticated = true; saveAuthToken(data.token); saveUserData(data.user); startAuthenticatedSession(); }
            else { console.warn('Falha no login:', data.errors?.[0]?.msg || response.statusText); loginErrorMessage.textContent = data.errors?.[0]?.msg || `Erro ${response.status}`; passwordInput.value = ''; usernameInput.select(); }
        } catch (error) { console.error('Erro de rede no login:', error); loginErrorMessage.textContent = 'Erro de conexão.'; }
        finally { submitButton.disabled = false; submitButton.innerHTML = '<i class="fas fa-sign-in-alt"></i> Entrar'; }
    }
    function handleLogout() { console.log(`Logout para: ${currentUser?.username}`); isAuthenticated = false; removeAuthToken(); removeUserData(); patients = []; selectedPatient = null; selectedProgramForProgress = null; currentView = 'clients-view'; if (progressChartInstance) progressChartInstance.destroy(); Object.values(consolidatedChartInstances).forEach(chart => chart.destroy()); progressChartInstance = null; consolidatedChartInstances = {}; resetUIForLogout(); showLoginScreen(); console.log("Sessão encerrada."); }

    // --- Inicialização Pós-Login (Mantida) ---
    async function startAuthenticatedSession() { if (!isAuthenticated || !currentUser) { console.error("Tentativa de iniciar sessão sem autenticação."); showLoginScreen(); return; } showMainAppScreen(); updateUserInfoDisplay(); await loadProgramsData(); await loadUserPatientsFromAPI(); setupMainEventListeners(); renderClientList(); renderProgramCategories(); updatePatientCountDisplay(); updateCurrentClientIndicator(); displayNoClientSelected(); switchView(currentView); console.log(`Sessão iniciada para ${currentUser.username}.`); }

    // --- Configuração de Listeners (Mantida, exceto printConsolidatedReportBtn já ajustado em initializeApp) ---
    function setupMainEventListeners() {
        topNavLinks.forEach(link => { link.removeEventListener('click', handleNavClick); link.addEventListener('click', handleNavClick); });
        clientSearchInput.removeEventListener('input', handleClientSearch); clientSearchInput.addEventListener('input', handleClientSearch);
        showAddClientFormBtn.removeEventListener('click', handleShowAddClientForm); showAddClientFormBtn.addEventListener('click', handleShowAddClientForm);
        closeAddClientPanelBtn.removeEventListener('click', handleCloseAddClientPanel); closeAddClientPanelBtn.addEventListener('click', handleCloseAddClientPanel);
        triggerAddClientFormBtn.removeEventListener('click', handleTriggerAddClientForm); triggerAddClientFormBtn.addEventListener('click', handleTriggerAddClientForm);
        clientListUl.removeEventListener('click', handleClientListClick); clientListUl.addEventListener('click', handleClientListClick);
        addClientForm.removeEventListener('submit', handleAddOrEditClientSubmit); addClientForm.addEventListener('submit', handleAddOrEditClientSubmit);
        editClientBtn.removeEventListener('click', handleEditClient); editClientBtn.addEventListener('click', handleEditClient);
        deleteClientBtn.removeEventListener('click', handleDeleteClient); deleteClientBtn.addEventListener('click', handleDeleteClient);
        generateClientGradePdfBtn.removeEventListener('click', handleGenerateGradePdf); generateClientGradePdfBtn.addEventListener('click', handleGenerateGradePdf);
        generateClientRecordPdfBtn.removeEventListener('click', handleGenerateRecordPdf); generateClientRecordPdfBtn.addEventListener('click', handleGenerateRecordPdf);
        generateConsolidatedReportBtn.removeEventListener('click', handleGenerateConsolidatedReport); generateConsolidatedReportBtn.addEventListener('click', handleGenerateConsolidatedReport); // Este ABRE o modal
        programSearchInput.removeEventListener('input', handleProgramSearch); programSearchInput.addEventListener('input', handleProgramSearch);
        saveNotesBtn.removeEventListener('click', handleSaveNotes); saveNotesBtn.addEventListener('click', handleSaveNotes);
    }
    // Handlers (Mantidos como antes)
    function handleNavClick(e) { e.preventDefault(); const viewId = e.currentTarget.dataset.view; if (viewId && isAuthenticated) { switchView(viewId); } }
    function handleClientSearch(e) { if (isAuthenticated) renderClientList(e.target.value); }
    function handleShowAddClientForm() { if (isAuthenticated && !showAddClientFormBtn.disabled) { resetAddClientForm(); addClientPanel.classList.remove('hidden'); clientDetailsPanel.classList.add('hidden'); noClientSelectedPlaceholder.classList.add('hidden'); clientNameInput.focus(); } }
    function handleCloseAddClientPanel() { if (isAuthenticated) { addClientPanel.classList.add('hidden'); if (selectedPatient) { clientDetailsPanel.classList.remove('hidden'); } else { noClientSelectedPlaceholder.classList.remove('hidden'); } } }
    function handleClientListClick(e) { if (isAuthenticated) { const clientItem = e.target.closest('.client-item'); if (clientItem && clientItem.dataset.clientId) { const clickedClientId = clientItem.dataset.clientId; const patientToSelect = patients.find(p => String(p.id) === clickedClientId); if (patientToSelect) { selectPatient(patientToSelect); } else { console.warn(`Paciente ID ${clickedClientId} não encontrado.`); } } } }
    function handleTriggerAddClientForm() { showAddClientFormBtn.click(); }
    function handleEditClient() { if (isAuthenticated) editClient(); }
    function handleDeleteClient() { if (isAuthenticated) deleteClient(); }
    function handleGenerateGradePdf() { if (isAuthenticated && selectedPatient) generateProgramGradePDF(selectedPatient); else alert("Selecione um cliente."); }
    function handleGenerateRecordPdf() { if (isAuthenticated && selectedPatient) generateWeeklyRecordSheetPDF(selectedPatient); else alert("Selecione um cliente."); }
    function handleGenerateConsolidatedReport() { if (isAuthenticated) openConsolidatedReportModal(); } // Apenas abre o modal
    function handleProgramSearch(e) { if (isAuthenticated) { const activeProgramLink = programCategoriesContainer.querySelector('a.program-link.active'); const programId = activeProgramLink ? activeProgramLink.dataset.programId : null; filterAndDisplayPrograms(programId, e.target.value); } }
    function handleSaveNotes() { if (isAuthenticated) saveNotes(); }

    // --- Reset da UI (Mantido) ---
    function resetUIForLogout() { loggedInUsernameSpan.textContent = 'Usuário'; userAvatarDiv.textContent = '--'; logoutButton.classList.add('hidden'); currentClientIndicator.textContent = ''; clientListUl.innerHTML = ''; noClientsMessageLi.classList.remove('hidden'); clientListUl.appendChild(noClientsMessageLi); assignedProgramsListUl.innerHTML = ''; noAssignedProgramsLi.classList.remove('hidden'); assignedProgramsListUl.appendChild(noAssignedProgramsLi); programLibraryListDiv.innerHTML = ''; programViewPlaceholder.classList.remove('hidden'); noProgramsMessage.classList.add('hidden'); programCategoriesContainer.innerHTML = ''; clientDetailsPanel.classList.add('hidden'); noClientSelectedPlaceholder.classList.remove('hidden'); addClientPanel.classList.add('hidden'); clearSessionProgressArea(); clientSearchInput.value = ''; programSearchInput.value = ''; updatePatientCountDisplay(); patientCountIndicator.classList.add('hidden'); notesViewTextarea.value = ''; notesViewTextarea.disabled = true; saveNotesBtn.disabled = true; if (notesPlaceholder) notesPlaceholder.classList.remove('hidden'); dashboardContent.classList.remove('hidden'); clientDashboardContent.classList.add('hidden'); clientDashboardContent.innerHTML = ''; showAddClientFormBtn.disabled = true; showAddClientFormBtn.title = ''; views.forEach(view => view.classList.add('hidden')); topNavLinks.forEach(link => link.classList.remove('active')); const defaultNavLink = document.querySelector('nav .nav-link[data-view="clients-view"]'); if(defaultNavLink) defaultNavLink.classList.add('active'); }

    // --- Atualizações da UI (Mantidas) ---
    function updateUserInfoDisplay() { if (currentUser) { loggedInUsernameSpan.textContent = currentUser.full_name || 'Usuário'; const initials = (currentUser.full_name || ' ').split(' ').map(n => n[0]).slice(0, 2).join('').toUpperCase(); userAvatarDiv.textContent = initials; logoutButton.classList.remove('hidden'); } }
    function updatePatientCountDisplay() { if (isAuthenticated && currentUser) { const limit = currentUser.max_patients || 0; patientCountIndicator.textContent = `Pacientes: ${patients.length} / ${limit}`; patientCountIndicator.classList.remove('hidden'); const canAddMore = patients.length < limit; showAddClientFormBtn.disabled = !canAddMore; showAddClientFormBtn.title = canAddMore ? '' : `Limite de ${limit} pacientes atingido`; } else { patientCountIndicator.textContent = `Pacientes: 0 / 0`; patientCountIndicator.classList.add('hidden'); showAddClientFormBtn.disabled = true; showAddClientFormBtn.title = ''; } }
    function updateCurrentClientIndicator() { if (!isAuthenticated) { currentClientIndicator.textContent = ''; currentClientIndicator.classList.add('italic', 'text-gray-500'); currentClientIndicator.classList.remove('font-medium', 'text-indigo-700'); return; } if (selectedPatient) { currentClientIndicator.textContent = `Cliente: ${selectedPatient.name}`; currentClientIndicator.classList.remove('italic', 'text-gray-500'); currentClientIndicator.classList.add('font-medium', 'text-indigo-700'); } else { currentClientIndicator.textContent = `Nenhum cliente selecionado`; currentClientIndicator.classList.add('italic', 'text-gray-500'); currentClientIndicator.classList.remove('font-medium', 'text-indigo-700'); } }

    // --- Carregamento e Salvamento de Dados (Mantido) ---
    async function loadProgramsData() { if (allPrograms.length > 0) return; try { const response = await fetch('data/programs.json'); if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`); allPrograms = await response.json(); console.log("Programas carregados:", allPrograms.length); } catch (error) { console.error('Erro fatal ao carregar programas:', error); alert("Falha ao carregar biblioteca de programas."); allPrograms = []; } }
    async function loadUserPatientsFromAPI() { if (!isAuthenticated || !authToken) { console.warn("Tentativa de carregar pacientes sem autenticação."); patients = []; return; } console.log("Carregando pacientes da API..."); try { const response = await fetch(`${API_BASE_URL}/patients`, { method: 'GET', headers: { 'Authorization': `Bearer ${authToken}`, 'Content-Type': 'application/json' } }); if (response.ok) { const data = await response.json(); patients = (data.patients || []).map(p => ({ ...p, assigned_program_ids: Array.isArray(p.assigned_program_ids) ? p.assigned_program_ids : [], sessionData: Array.isArray(p.sessionData) ? p.sessionData : [] })); console.log(`Pacientes carregados:`, patients.length); } else if (response.status === 401 || response.status === 403) { console.error("Erro ao carregar pacientes: Token inválido/expirado.", response.status); alert("Sessão expirada. Faça login novamente."); handleLogout(); patients = []; } else { const errorData = await response.json().catch(() => ({ errors: [{msg: response.statusText}] })); console.error(`Erro ${response.status} ao carregar pacientes:`, errorData.errors?.[0]?.msg || response.statusText); alert(`Erro ao carregar pacientes: ${errorData.errors?.[0]?.msg || 'Erro desconhecido'}`); patients = []; } } catch (error) { console.error("Erro de rede ao carregar pacientes:", error); alert("Erro de conexão ao buscar pacientes."); patients = []; } renderClientList(); updatePatientCountDisplay(); }

    // --- Gerenciamento de Visão (Mantido) ---
    function switchView(viewId, context = null) { if (!isAuthenticated) return; console.log(`Mudando visão para: ${viewId}`, context || ''); currentView = viewId; topNavLinks.forEach(link => { link.classList.toggle('active', link.dataset.view === viewId); }); views.forEach(view => { view.classList.toggle('hidden', view.id !== viewId); }); updateContextualSidebar(viewId); switch (viewId) { case 'clients-view': handleClientViewSwitch(context); break; case 'programs-view': handleProgramViewSwitch(context); break; case 'dashboard-view': renderDashboard(); break; case 'notes-view': handleNotesViewSwitch(); break; case 'tip-guide-view': break; } mainContentArea.scrollTop = 0; }
    function updateContextualSidebar(viewId) { let targetSidebarId = ''; switch (viewId) { case 'clients-view': case 'dashboard-view': case 'notes-view': targetSidebarId = 'sidebar-content-clients'; break; case 'programs-view': targetSidebarId = 'sidebar-content-programs'; break; case 'tip-guide-view': targetSidebarId = 'sidebar-content-tip-guide'; break; default: targetSidebarId = 'sidebar-content-clients'; } sidebarSections.forEach(section => { section.classList.toggle('hidden', section.id !== targetSidebarId); }); if (targetSidebarId === 'sidebar-content-clients') { renderClientList(clientSearchInput.value); updatePatientCountDisplay(); } else if (targetSidebarId === 'sidebar-content-programs') { filterAndDisplayPrograms(null, programSearchInput.value); } }

    // --- Lógica Específica das Views (Mantida) ---
    function handleClientViewSwitch(context) { if (context?.clientId) { const patientToSelect = patients.find(p => String(p.id) === String(context.clientId)); selectPatient(patientToSelect); } else if (selectedPatient) { selectPatient(selectedPatient); } else { displayNoClientSelected(); } if (!(context?.showAddPanel)) { addClientPanel.classList.add('hidden'); } }
    function handleProgramViewSwitch(context) { const programId = context?.programId || null; const searchText = programSearchInput.value; filterAndDisplayPrograms(programId, searchText); programCategoriesContainer.querySelectorAll('a.program-link, summary').forEach(el => { el.classList.remove('active'); }); if(programId) { const link = programCategoriesContainer.querySelector(`a.program-link[data-program-id="${programId}"]`); if(link) { link.classList.add('active'); const details = link.closest('details'); if(details && !details.open) details.open = true; if(details) details.querySelector('summary')?.classList.add('active'); } } }
    function handleNotesViewSwitch() { if (selectedPatient) { notesViewTextarea.value = selectedPatient.general_notes || ''; notesViewTextarea.disabled = false; saveNotesBtn.disabled = false; if(notesPlaceholder) notesPlaceholder.classList.add('hidden'); } else { notesViewTextarea.value = ''; notesViewTextarea.disabled = true; saveNotesBtn.disabled = true; if(notesPlaceholder) notesPlaceholder.classList.remove('hidden'); } }

    // --- Gerenciamento de Clientes (Mantido) ---
    function renderClientList(filterText = '') { if (!isAuthenticated) return; clientListUl.innerHTML = ''; const lowerCaseFilter = filterText.toLowerCase(); const filteredPatients = patients.filter(patient => patient.name.toLowerCase().includes(lowerCaseFilter)); filteredPatients.sort((a, b) => a.name.localeCompare(b.name, 'pt-BR')); if (filteredPatients.length === 0) { noClientsMessageLi.classList.remove('hidden'); clientListUl.appendChild(noClientsMessageLi); noClientsMessageLi.textContent = patients.length === 0 ? 'Nenhum cliente cadastrado.' : 'Nenhum cliente encontrado.'; } else { noClientsMessageLi.classList.add('hidden'); filteredPatients.forEach(patient => { const li = document.createElement('li'); li.dataset.clientId = patient.id; const isSelected = selectedPatient && String(selectedPatient.id) === String(patient.id); li.className = `client-item cursor-pointer px-3 py-2 rounded-md text-sm hover:bg-gray-100 flex items-center justify-between ${isSelected ? 'active' : 'text-gray-700'}`; li.innerHTML = `<span class="truncate" title="${patient.name}">${patient.name}</span> ${isSelected ? '<i class="fas fa-check-circle text-indigo-500 text-xs"></i>' : ''}`; clientListUl.appendChild(li); }); } updatePatientCountDisplay(); }
    function selectPatient(patient) { if (!isAuthenticated || !patient || !patients.some(p => String(p.id) === String(patient.id))) { console.warn("Tentativa de selecionar paciente inválido:", patient); displayNoClientSelected(); return; } selectedPatient = patient; updateCurrentClientIndicator(); renderClientList(clientSearchInput.value); if (currentView === 'clients-view') { displayClientDetails(selectedPatient); noClientSelectedPlaceholder.classList.add('hidden'); clientDetailsPanel.classList.remove('hidden'); addClientPanel.classList.add('hidden'); } else if (currentView === 'notes-view') { handleNotesViewSwitch(); } else if (currentView === 'dashboard-view') { renderDashboard(); } else if (currentView === 'programs-view') { filterAndDisplayPrograms(null, programSearchInput.value); } }
    function displayNoClientSelected() { if (!isAuthenticated) return; selectedPatient = null; updateCurrentClientIndicator(); renderClientList(clientSearchInput.value); clientDetailsPanel.classList.add('hidden'); noClientSelectedPlaceholder.classList.remove('hidden'); addClientPanel.classList.add('hidden'); clearSessionProgressArea(); if (currentView === 'notes-view') handleNotesViewSwitch(); if (currentView === 'dashboard-view') renderDashboard(); if (currentView === 'programs-view') filterAndDisplayPrograms(null, programSearchInput.value); }
    function displayClientDetails(patient) { if (!isAuthenticated || !patient) return; detailClientNameSpan.textContent = patient.name; detailClientIdSpan.textContent = patient.id; detailClientDobSpan.textContent = patient.dob ? formatDate(patient.dob) : 'Não informado'; detailClientDiagnosisSpan.textContent = patient.diagnosis || 'Não informado'; detailClientNotesSpan.textContent = patient.general_notes || 'Sem anotações'; renderAssignedPrograms(patient.assigned_program_ids || []); clearSessionProgressArea(); }
    async function handleAddOrEditClientSubmit(e) { e.preventDefault(); if (!isAuthenticated || !authToken) return; const editingClientId = e.target.dataset.editingClientId; const clientData = { name: clientNameInput.value.trim(), dob: clientDobInput.value || null, diagnosis: clientDiagnosisInput.value.trim() || null, notes: clientNotesInput.value.trim() || null, }; if (!clientData.name) { alert("Insira o nome."); clientNameInput.focus(); return; } let url = `${API_BASE_URL}/patients`; let method = 'POST'; if (editingClientId) { url += `/${editingClientId}`; method = 'PUT'; } else { const limit = currentUser.max_patients || 0; if (patients.length >= limit) { alert(`Limite de ${limit} pacientes atingido.`); return; } } try { const response = await fetch(url, { method: method, headers: { 'Authorization': `Bearer ${authToken}`, 'Content-Type': 'application/json', }, body: JSON.stringify(clientData), }); const result = await response.json(); if (response.ok) { alert(`Cliente "${clientData.name}" ${editingClientId ? 'atualizado' : 'cadastrado'}.`); resetAddClientForm(); await loadUserPatientsFromAPI(); const targetId = result.patient?.id || editingClientId; const foundPatient = patients.find(p => String(p.id) === String(targetId)); if (foundPatient) { selectPatient(foundPatient); } else { displayNoClientSelected(); } } else { console.error(`Erro ao ${editingClientId ? 'editar' : 'adicionar'} cliente:`, result.errors?.[0]?.msg || response.statusText); alert(`Erro: ${result.errors?.[0]?.msg || 'Falha ao salvar.'}`); } } catch (error) { console.error(`Erro de rede ao ${editingClientId ? 'editar' : 'adicionar'} cliente:`, error); alert("Erro de conexão."); } }
    async function deleteClient() { if (!selectedPatient || !authToken) return; if (confirm(`Excluir "${selectedPatient.name}"?`)) { const patientId = selectedPatient.id; const patientName = selectedPatient.name; try { const response = await fetch(`${API_BASE_URL}/patients/${patientId}`, { method: 'DELETE', headers: { 'Authorization': `Bearer ${authToken}`, } }); if (response.ok || response.status === 204) { alert(`Cliente "${patientName}" excluído.`); displayNoClientSelected(); await loadUserPatientsFromAPI(); } else { const result = await response.json().catch(() => ({ errors: [{msg: response.statusText}] })); console.error('Erro ao excluir:', result.errors?.[0]?.msg || response.statusText); alert(`Erro: ${result.errors?.[0]?.msg || 'Falha.'}`); } } catch (error) { console.error('Erro de rede ao excluir:', error); alert("Erro de conexão."); } } }
    function editClient() { if (!selectedPatient) return; clientNameInput.value = selectedPatient.name; clientDobInput.value = selectedPatient.dob || ''; clientDiagnosisInput.value = selectedPatient.diagnosis || ''; clientNotesInput.value = selectedPatient.general_notes || ''; addClientFormTitle.textContent = 'Editar Cliente'; addClientFormSubmitBtn.innerHTML = '<i class="fas fa-save mr-1"></i> Salvar Alterações'; addClientForm.dataset.editingClientId = selectedPatient.id; clientDetailsPanel.classList.add('hidden'); noClientSelectedPlaceholder.classList.add('hidden'); addClientPanel.classList.remove('hidden'); clientNameInput.focus(); }
    function resetAddClientForm() { addClientForm.reset(); addClientPanel.classList.add('hidden'); addClientFormTitle.textContent = 'Cadastrar Novo Cliente'; addClientFormSubmitBtn.innerHTML = '<i class="fas fa-save mr-1"></i> Salvar Cliente'; delete addClientForm.dataset.editingClientId; }

    // --- Gerenciamento de Programas (Mantido) ---
    function renderProgramCategories() { if (!isAuthenticated || allPrograms.length === 0) return; const categories = {}; allPrograms.forEach(program => { const tag = program.tag || 'Sem Categoria'; if (!categories[tag]) { categories[tag] = {}; } categories[tag][program.id] = program.title; }); programCategoriesContainer.innerHTML = ''; const sortedCategories = Object.keys(categories).sort((a, b) => a.localeCompare(b, 'pt-BR')); sortedCategories.forEach(tag => { const details = document.createElement('details'); details.className = 'group program-category-details'; details.innerHTML = `<summary class="flex justify-between items-center font-medium cursor-pointer list-none p-2 rounded hover:bg-gray-100 text-gray-700 group-open:active"><span class="flex items-center"><i class="fas fa-folder w-4 mr-2 text-indigo-400 group-open:text-indigo-600"></i> ${tag}</span><span class="transition group-open:rotate-90"><i class="fas fa-chevron-right text-xs"></i></span></summary><ul class="mt-1 ml-4 space-y-1 border-l border-gray-200 pl-3 program-list-ul">${Object.entries(categories[tag]).sort(([, titleA], [, titleB]) => titleA.localeCompare(titleB, 'pt-BR')).map(([id, title]) => `<li><a href="#" class="program-link block text-sm text-gray-600 hover:text-indigo-600 hover:bg-gray-100 px-2 py-1 rounded" data-program-id="${id}">${title}</a></li>`).join('')}</ul>`; programCategoriesContainer.appendChild(details); }); programCategoriesContainer.querySelectorAll('a.program-link').forEach(link => { link.removeEventListener('click', handleProgramLinkClick); link.addEventListener('click', handleProgramLinkClick); }); programCategoriesContainer.querySelectorAll('details.program-category-details').forEach(detailsElement => { detailsElement.removeEventListener('toggle', handleCategoryToggle); detailsElement.addEventListener('toggle', handleCategoryToggle); }); }
    function handleProgramLinkClick(e) { e.preventDefault(); if (!isAuthenticated) return; const link = e.currentTarget; const programId = link.dataset.programId; programCategoriesContainer.querySelectorAll('a.program-link, summary').forEach(el => el.classList.remove('active')); link.classList.add('active'); const parentSummary = link.closest('details')?.querySelector('summary'); if (parentSummary) { parentSummary.classList.add('active'); if (!link.closest('details').open) { link.closest('details').open = true; } } filterAndDisplayPrograms(programId, ''); programSearchInput.value = ''; }
    function handleCategoryToggle(event) { if (!isAuthenticated) return; const detailsElement = event.target; if (detailsElement.open) { programCategoriesContainer.querySelectorAll('details.program-category-details').forEach(otherDetails => { if (otherDetails !== detailsElement) { otherDetails.open = false; } }); programCategoriesContainer.querySelectorAll('details.program-category-details:not([open]) a.program-link, details.program-category-details:not([open]) summary').forEach(el => { el.classList.remove('active'); }); } else { detailsElement.querySelectorAll('a.program-link, summary').forEach(el => { el.classList.remove('active'); }); filterAndDisplayPrograms(null, programSearchInput.value); } }
    function filterAndDisplayPrograms(programId = null, searchText = '') { if (!isAuthenticated) return; programLibraryListDiv.innerHTML = ''; const lowerSearchText = searchText.toLowerCase().trim(); let programsToDisplay = []; if (programId) { const program = allPrograms.find(p => p.id === programId); if (program) programsToDisplay.push(program); } else if (lowerSearchText) { programsToDisplay = allPrograms.filter(program => program.title.toLowerCase().includes(lowerSearchText) || program.tag?.toLowerCase().includes(lowerSearchText) || program.objective?.toLowerCase().includes(lowerSearchText)); } else { programsToDisplay = [...allPrograms]; } programsToDisplay.sort((a, b) => a.title.localeCompare(b.title, 'pt-BR')); if (programsToDisplay.length > 0) { programViewPlaceholder.classList.add('hidden'); noProgramsMessage.classList.add('hidden'); programsToDisplay.forEach(program => { const card = createProgramCardElement(program, selectedPatient); programLibraryListDiv.appendChild(card); }); } else { programViewPlaceholder.classList.add('hidden'); noProgramsMessage.classList.remove('hidden'); } }
    function createProgramCardElement(program, currentSelectedPatient) { const card = document.createElement('div'); card.className = 'program-card bg-white rounded-lg shadow p-5 flex flex-col justify-between transition hover:shadow-md border border-gray-200'; card.dataset.programId = program.id; const procedurePreviewHTML = program.procedure?.slice(0, 2).map(step => `<p class="text-xs text-gray-600 mb-1 truncate"><strong class="font-medium text-gray-800">${step.term}:</strong> ${step.description}</p>`).join('') + (program.procedure?.length > 2 ? '<p class="text-xs text-gray-400 italic mt-1">...</p>' : '') || '<p class="text-xs text-gray-400 italic">Procedimento não detalhado.</p>'; const materialsHTML = program.materials?.length > 0 ? `<div class="mt-2"><h4 class="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-1">Materiais</h4><ul class="list-disc list-inside text-xs text-gray-600 space-y-0.5">${program.materials.slice(0, 3).map(item => `<li class="truncate">${item}</li>`).join('')}${program.materials.length > 3 ? '<li class="text-gray-400 italic">...</li>' : ''}</ul></div>` : ''; const assignedProgramIds = currentSelectedPatient?.assigned_program_ids || []; const isAssigned = currentSelectedPatient && assignedProgramIds.includes(program.id); const assignButtonHTML = currentSelectedPatient ? `<button class="assign-program-btn text-xs font-medium py-1 px-3 rounded ${isAssigned ? 'assigned bg-emerald-500 text-white cursor-default' : 'bg-indigo-100 text-indigo-700 hover:bg-indigo-200'}" data-program-id="${program.id}" title="${isAssigned ? 'Programa Já Atribuído' : 'Atribuir ao Cliente'}" ${isAssigned ? 'disabled' : ''}><i class="fas ${isAssigned ? 'fa-check' : 'fa-plus'} mr-1"></i> ${isAssigned ? 'Atribuído' : 'Atribuir'}</button>` : `<button class="text-xs font-medium py-1 px-3 rounded bg-gray-100 text-gray-500 cursor-not-allowed" disabled title="Selecione um cliente"><i class="fas fa-plus mr-1"></i> Atribuir</button>`; card.innerHTML = `<div><div class="flex justify-between items-start mb-2"><h3 class="text-base font-semibold text-gray-800 leading-tight">${program.title}</h3><span class="tag text-xs font-semibold uppercase px-2 py-0.5 rounded-full ${getTagColor(program.tag || 'N/A')} flex-shrink-0 ml-2">${program.tag || 'N/A'}</span></div><p class="text-xs font-medium text-indigo-600 mb-1">Objetivo:</p><p class="text-xs text-gray-600 mb-3 line-clamp-2" title="${program.objective || ''}">${program.objective || 'Não definido'}</p>${materialsHTML}<div class="mt-3"><h4 class="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-1">Procedimento (Prévia)</h4>${procedurePreviewHTML}</div></div><div class="program-card-actions mt-4 pt-3 border-t border-gray-100 text-right">${assignButtonHTML}</div>`; const assignButton = card.querySelector('.assign-program-btn'); if (assignButton && !assignButton.disabled) { assignButton.removeEventListener('click', handleAssignProgram); assignButton.addEventListener('click', handleAssignProgram); } return card; }
    function getTagColor(tag) { const colors = { "Mando": "bg-blue-100 text-blue-800", "Tato": "bg-green-100 text-green-800", "Ecoico": "bg-yellow-100 text-yellow-800", "Intraverbal": "bg-purple-100 text-purple-800", "Imitação": "bg-pink-100 text-pink-800", "Contato Visual": "bg-red-100 text-red-800", "Comportamento Ouvinte": "bg-orange-100 text-orange-800", "Brincar": "bg-teal-100 text-teal-800", "Habilidades Sociais": "bg-cyan-100 text-cyan-800", "Pareamento": "bg-gray-200 text-gray-800", }; return colors[tag] || "bg-gray-100 text-gray-800"; }
    async function handleAssignProgram(e) { if (!isAuthenticated || !selectedPatient || !authToken) { alert("Selecione um cliente."); return; } const button = e.currentTarget; const programId = button.dataset.programId; const program = allPrograms.find(p => p.id === programId); if (!program) return; const assignedProgramIds = selectedPatient?.assigned_program_ids || []; if (assignedProgramIds.includes(programId)) return; console.log(`Atribuindo programa ${programId} ao paciente ${selectedPatient.id}`); try { const response = await fetch(`${API_BASE_URL}/patients/${selectedPatient.id}/programs`, { method: 'POST', headers: { 'Authorization': `Bearer ${authToken}`, 'Content-Type': 'application/json', }, body: JSON.stringify({ programId: programId }) }); if (response.ok) { alert(`Programa "${program.title}" atribuído a ${selectedPatient.name}.`); if (!selectedPatient.assigned_program_ids) selectedPatient.assigned_program_ids = []; selectedPatient.assigned_program_ids.push(programId); renderAssignedPrograms(selectedPatient.assigned_program_ids); button.classList.remove('bg-indigo-100', 'text-indigo-700', 'hover:bg-indigo-200'); button.classList.add('assigned', 'bg-emerald-500', 'text-white', 'cursor-default'); button.innerHTML = `<i class="fas fa-check mr-1"></i> Atribuído`; button.disabled = true; button.title = 'Programa Já Atribuído'; } else { const result = await response.json().catch(() => ({ errors: [{msg: response.statusText}] })); console.error('Erro ao atribuir:', result.errors?.[0]?.msg || response.statusText); alert(`Erro: ${result.errors?.[0]?.msg || 'Falha.'}`); } } catch (error) { console.error('Erro de rede ao atribuir:', error); alert("Erro de conexão."); } }
    async function handleRemoveProgram(e) { if (!isAuthenticated || !selectedPatient || !authToken) return; const button = e.currentTarget; const programIdToRemove = button.dataset.programId; const program = allPrograms.find(p => p.id === programIdToRemove); const programTitle = program ? program.title : 'este programa'; if (confirm(`Remover "${programTitle}" de ${selectedPatient.name}?`)) { console.log(`Removendo programa ${programIdToRemove} do paciente ${selectedPatient.id}`); try { const response = await fetch(`${API_BASE_URL}/patients/${selectedPatient.id}/programs/${programIdToRemove}`, { method: 'DELETE', headers: { 'Authorization': `Bearer ${authToken}`, } }); if (response.ok || response.status === 204) { alert(`Programa "${programTitle}" removido.`); selectedPatient.assigned_program_ids = (selectedPatient.assigned_program_ids || []).filter(id => id !== programIdToRemove); renderAssignedPrograms(selectedPatient.assigned_program_ids); const programCardButton = programLibraryListDiv.querySelector(`.assign-program-btn[data-program-id="${programIdToRemove}"]`); if (programCardButton) { programCardButton.classList.remove('assigned', 'bg-emerald-500', 'text-white', 'cursor-default'); programCardButton.classList.add('bg-indigo-100', 'text-indigo-700', 'hover:bg-indigo-200'); programCardButton.innerHTML = `<i class="fas fa-plus mr-1"></i> Atribuir`; programCardButton.disabled = false; programCardButton.title = 'Atribuir ao Cliente'; } if (selectedProgramForProgress?.id === programIdToRemove) { clearSessionProgressArea(); } } else { const result = await response.json().catch(() => ({ errors: [{msg: response.statusText}] })); console.error('Erro ao remover:', result.errors?.[0]?.msg || response.statusText); alert(`Erro: ${result.errors?.[0]?.msg || 'Falha.'}`); } } catch (error) { console.error('Erro de rede ao remover:', error); alert("Erro de conexão."); } } }
    function renderAssignedPrograms(assignedProgramIds) { assignedProgramsListUl.innerHTML = ''; if (!assignedProgramIds || assignedProgramIds.length === 0) { noAssignedProgramsLi.classList.remove('hidden'); assignedProgramsListUl.appendChild(noAssignedProgramsLi); } else { noAssignedProgramsLi.classList.add('hidden'); const assignedProgramsDetails = allPrograms.filter(p => assignedProgramIds.includes(p.id)).sort((a, b) => a.title.localeCompare(b.title, 'pt-BR')); assignedProgramsDetails.forEach(program => { const li = document.createElement('li'); const isSelectedForProgress = selectedProgramForProgress?.id === program.id; li.className = `assigned-program-item flex justify-between items-center p-2 rounded hover:bg-gray-50 ${isSelectedForProgress ? 'active' : ''}`; li.dataset.programId = program.id; const fullTitle = `${program.title} (${program.tag || 'N/A'})`; li.innerHTML = `<span class="program-title-span text-sm font-medium text-gray-700 truncate pr-2" title="${fullTitle}">${program.title} <span class="text-xs text-gray-500">(${program.tag || 'N/A'})</span></span><div class="program-actions flex space-x-2 flex-shrink-0 no-print"><button class="view-progress-btn text-xs font-medium text-indigo-600 hover:text-indigo-800 px-2 py-1 rounded hover:bg-indigo-50 flex items-center" title="Ver Progresso/Registrar Sessão" data-program-id="${program.id}"><i class="fas fa-chart-line fa-fw mr-1"></i> Ver/Registrar</button><button class="remove-program-btn text-xs font-medium text-red-500 hover:text-red-700 px-2 py-1 rounded hover:bg-red-50 flex items-center" title="Remover Programa" data-program-id="${program.id}"><i class="fas fa-times-circle fa-fw mr-1"></i> Remover</button></div>`; const viewBtn = li.querySelector('.view-progress-btn'); const removeBtn = li.querySelector('.remove-program-btn'); viewBtn.removeEventListener('click', handleViewProgramProgress); viewBtn.addEventListener('click', handleViewProgramProgress); removeBtn.removeEventListener('click', handleRemoveProgram); removeBtn.addEventListener('click', handleRemoveProgram); assignedProgramsListUl.appendChild(li); }); } }

    // --- Gerenciamento de Sessão e Progresso (Mantido) ---
    function handleViewProgramProgress(e) { if (!isAuthenticated || !selectedPatient) return; const button = e.currentTarget; const programId = button.dataset.programId; selectedProgramForProgress = allPrograms.find(p => p.id === programId); if (selectedProgramForProgress) { renderSessionEntryForm(selectedProgramForProgress); assignedProgramsListUl.querySelectorAll('.assigned-program-item').forEach(item => { item.classList.toggle('active', item.dataset.programId === programId); }); } else { console.error("Programa selecionado não encontrado:", programId); clearSessionProgressArea(); } }
    function clearSessionProgressArea() { progressDetailsAreaDiv.innerHTML = `<div class="text-center text-gray-500 py-6"><i class="fas fa-tasks text-3xl mb-3 text-gray-400"></i><p class="text-sm">Selecione um programa atribuído na lista ao lado para registrar uma sessão ou ver o gráfico de progresso.</p></div>`; selectedProgramForProgress = null; if (progressChartInstance) { progressChartInstance.destroy(); progressChartInstance = null; } assignedProgramsListUl.querySelectorAll('.assigned-program-item').forEach(item => { item.classList.remove('active'); }); }
    function renderSessionEntryForm(program) { if (!isAuthenticated || !selectedPatient) return; const criteriaHTML = program.criteria_for_advancement ? `<div class="mb-6 p-3 bg-blue-50 border border-blue-200 rounded-md"><h5 class="text-sm font-semibold text-blue-800 mb-1">Critério para Avanço:</h5><p class="text-xs text-blue-700">${program.criteria_for_advancement}</p></div>` : ''; progressDetailsAreaDiv.innerHTML = `<h4 class="text-base font-semibold text-gray-700 mb-3">Registrar Sessão: <span class="font-normal">${program.title}</span></h4>${criteriaHTML}<form id="add-session-form" data-program-id="${program.id}" class="space-y-3 mb-6 border-b pb-6 border-gray-200"><div class="grid grid-cols-1 sm:grid-cols-2 gap-3"><div><label for="session-date" class="block text-xs font-medium text-gray-600 mb-1">Data:</label><input type="date" id="session-date" required value="${new Date().toISOString().split('T')[0]}" class="w-full px-2 py-1.5 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 text-sm shadow-sm"></div><div><label for="session-score" class="block text-xs font-medium text-gray-600 mb-1">Pontuação / % Acerto:</label><input type="number" id="session-score" min="0" max="100" step="any" required placeholder="0-100" class="w-full px-2 py-1.5 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 text-sm shadow-sm"></div></div><div><label for="session-notes" class="block text-xs font-medium text-gray-600 mb-1">Observações:</label><textarea id="session-notes" rows="2" placeholder="Alguma observação sobre a sessão?" class="w-full px-2 py-1.5 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 text-sm resize-none shadow-sm"></textarea></div><div class="flex items-center"><input id="session-is-baseline" type="checkbox" class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"><label for="session-is-baseline" class="ml-2 block text-xs font-medium text-gray-700">Marcar como Linha de Base</label></div><div class="flex justify-end space-x-2"><button type="button" id="cancel-session-entry" class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium py-1.5 px-4 rounded-md text-xs transition duration-150 ease-in-out border border-gray-300 shadow-sm">Limpar Área</button><button type="submit" class="bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-1.5 px-4 rounded-md text-xs transition duration-150 ease-in-out shadow hover:shadow-md"><i class="fas fa-save mr-1"></i> Salvar Registro</button></div></form><div id="program-progress-chart" class="mt-4"><h4 class="text-base font-semibold text-gray-700 mb-2">Progresso do Programa</h4><div class="relative h-64 md:h-72 bg-gray-50 rounded border border-gray-200"><canvas id="progressChartCanvas" class="absolute inset-0"></canvas></div><p id="no-progress-data-message" class="hidden text-center text-sm text-gray-500 mt-4">Nenhum dado de sessão registrado.</p></div>`; const form = document.getElementById('add-session-form'); const cancelBtn = document.getElementById('cancel-session-entry'); form.removeEventListener('submit', handleAddSession); form.addEventListener('submit', handleAddSession); cancelBtn.removeEventListener('click', clearSessionProgressArea); cancelBtn.addEventListener('click', clearSessionProgressArea); renderProgressChart(program.id); }
    async function handleAddSession(e) { e.preventDefault(); if (!isAuthenticated || !selectedPatient || !selectedProgramForProgress || !authToken) return; const form = e.target; const programId = form.dataset.programId; const sessionData = { programId: programId, date: form.querySelector('#session-date').value, score: form.querySelector('#session-score').value, notes: form.querySelector('#session-notes').value.trim(), isBaseline: form.querySelector('#session-is-baseline').checked }; if (!sessionData.date || sessionData.score === '') { alert("Preencha data e pontuação."); return; } const scoreNum = parseFloat(sessionData.score); if (isNaN(scoreNum) || scoreNum < 0 || scoreNum > 100) { alert("Pontuação inválida (0-100)."); return; } sessionData.score = scoreNum; console.log(`Salvando sessão para paciente ${selectedPatient.id}, programa ${programId}`); try { const response = await fetch(`${API_BASE_URL}/patients/${selectedPatient.id}/sessions`, { method: 'POST', headers: { 'Authorization': `Bearer ${authToken}`, 'Content-Type': 'application/json', }, body: JSON.stringify(sessionData) }); if (response.ok) { const newSession = await response.json(); console.log("Sessão salva:", newSession); if (!selectedPatient.sessionData) selectedPatient.sessionData = []; selectedPatient.sessionData.push({ ...newSession, score: parseFloat(newSession.score) }); form.querySelector('#session-score').value = ''; form.querySelector('#session-notes').value = ''; form.querySelector('#session-is-baseline').checked = false; renderProgressChart(programId); } else { const result = await response.json().catch(() => ({ errors: [{msg: response.statusText}] })); console.error('Erro ao salvar sessão:', result.errors?.[0]?.msg || response.statusText); alert(`Erro: ${result.errors?.[0]?.msg || 'Falha.'}`); } } catch (error) { console.error('Erro de rede ao salvar sessão:', error); alert("Erro de conexão."); } }
    function renderProgressChart(programId) { if (!isAuthenticated || !selectedPatient) return; const canvasContainer = document.getElementById('program-progress-chart'); const canvas = document.getElementById('progressChartCanvas'); const noDataMessage = document.getElementById('no-progress-data-message'); const chartArea = canvasContainer?.querySelector('.relative'); if (!canvas || !noDataMessage || !chartArea) { console.error("Elementos do gráfico não encontrados."); return; } if (progressChartInstance) { progressChartInstance.destroy(); progressChartInstance = null; } const programSessionData = selectedPatient.sessionData?.filter(session => String(session.program_id || session.programId) === String(programId)).sort((a, b) => new Date(a.session_date || a.date) - new Date(b.session_date || b.date)).map(s => ({ ...s, score: parseFloat(s.score) })) || []; if (programSessionData.length === 0) { noDataMessage.classList.remove('hidden'); chartArea.classList.add('hidden'); return; } noDataMessage.classList.add('hidden'); chartArea.classList.remove('hidden'); const dates = programSessionData.map(session => formatDate(session.session_date || session.date, 'short')); const scores = programSessionData.map(session => session.score); const pointStyles = programSessionData.map(session => session.is_baseline || session.isBaseline ? 'rect' : 'circle'); const pointBackgroundColors = programSessionData.map(session => session.is_baseline || session.isBaseline ? '#fbbf24' : '#4f46e5'); const pointRadii = programSessionData.map(session => session.is_baseline || session.isBaseline ? 5 : 4); const ctx = canvas.getContext('2d'); const primaryColor = '#4f46e5'; const baselineColor = '#fbbf24'; const primaryLight = 'rgba(79, 70, 229, 0.1)'; const textColor = '#4b5563'; const gridColor = '#e5e7eb'; const pointBorderColor = '#ffffff'; progressChartInstance = new Chart(ctx, { type: 'line', data: { labels: dates, datasets: [{ label: 'Pontuação (%)', data: scores, borderColor: primaryColor, backgroundColor: primaryLight, pointStyle: pointStyles, pointBackgroundColor: pointBackgroundColors, pointRadius: pointRadii, pointBorderColor: pointBorderColor, pointHoverBackgroundColor: pointBackgroundColors, pointHoverBorderColor: pointBorderColor, pointHoverRadius: pointRadii.map(r => r + 2), pointHoverBorderWidth: 2, fill: true, tension: 0.2, borderWidth: 2, }] }, options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true, max: 100, ticks: { color: textColor, font: { size: 10 } }, grid: { color: gridColor, drawBorder: false } }, x: { ticks: { color: textColor, font: { size: 10 } }, grid: { display: false } } }, plugins: { legend: { display: false }, tooltip: { enabled: true, backgroundColor: '#1f2937', titleColor: '#fff', bodyColor: '#fff', padding: 10, cornerRadius: 4, displayColors: true, borderColor: (tooltipItem) => { const index = tooltipItem.tooltip.dataPoints[0].dataIndex; return programSessionData[index]?.is_baseline || programSessionData[index]?.isBaseline ? baselineColor : primaryColor; }, borderWidth: 1, callbacks: { title: function(tooltipItems) { const index = tooltipItems[0].dataIndex; if (index < 0 || index >= programSessionData.length) return ''; const session = programSessionData[index]; const baselinePrefix = session.is_baseline || session.isBaseline ? '[Linha de Base] ' : ''; return `${baselinePrefix}Data: ${formatDate(session.session_date || session.date)}`; }, label: function(context) { let label = context.dataset.label || ''; if (label) { label += ': '; } if (context.parsed.y !== null) { label += context.parsed.y + '%'; } const index = context.dataIndex; if (index >= 0 && index < programSessionData.length) { const notes = programSessionData[index].notes; if(notes) { const truncatedNotes = notes.length > 50 ? notes.substring(0, 47) + '...' : notes; label += `\nObs: ${truncatedNotes}`; } } return label; }, labelColor: function(context) { const index = context.dataIndex; if (index < 0 || index >= programSessionData.length) return { borderColor: primaryColor, backgroundColor: primaryColor }; const isBaseline = programSessionData[index].is_baseline || programSessionData[index].isBaseline; return { borderColor: isBaseline ? baselineColor : primaryColor, backgroundColor: isBaseline ? baselineColor : primaryColor, borderWidth: 2, borderRadius: isBaseline ? 0 : '50%' }; }, } } }, hover: { mode: 'index', intersect: false }, interaction: { mode: 'index', intersect: false }, } }); }

    // --- Dashboard (Mantido) ---
    function renderDashboard() { if (!isAuthenticated) return; if (selectedPatient) { dashboardContent.classList.add('hidden'); clientDashboardContent.classList.remove('hidden'); clientDashboardContent.innerHTML = `<h2 class="text-xl font-semibold text-gray-700 mb-4">Dashboard: ${selectedPatient.name}</h2><div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"><div class="bg-white p-4 rounded-lg shadow"><h3 class="text-sm font-medium text-gray-500 mb-1">Programas Ativos</h3><p class="text-2xl font-semibold text-indigo-600">${(selectedPatient.assigned_program_ids)?.length || 0}</p></div><div class="bg-white p-4 rounded-lg shadow"><h3 class="text-sm font-medium text-gray-500 mb-1">Sessões Registradas</h3><p class="text-2xl font-semibold text-emerald-600">${selectedPatient.sessionData?.length || 0}</p></div><div class="bg-white p-4 rounded-lg shadow"><h3 class="text-sm font-medium text-gray-500 mb-1">Progresso Médio (Interv.)</h3><p class="text-2xl font-semibold text-amber-600">${calculateOverallAverageProgress(selectedPatient)}%</p></div></div>`; } else { dashboardContent.classList.remove('hidden'); clientDashboardContent.classList.add('hidden'); clientDashboardContent.innerHTML = ''; dashboardContent.innerHTML = `<h2 class="text-xl font-semibold text-gray-700 mb-4">Dashboard Geral - ${currentUser.full_name}</h2><div class="grid grid-cols-1 md:grid-cols-2 gap-4"><div class="bg-white p-4 rounded-lg shadow"><h3 class="text-sm font-medium text-gray-500 mb-1">Total de Clientes</h3><p class="text-2xl font-semibold text-indigo-600">${patients.length} / ${currentUser.max_patients || 0}</p></div><div class="bg-white p-4 rounded-lg shadow"><h3 class="text-sm font-medium text-gray-500 mb-1">Total de Sessões (Todos Clientes)</h3><p class="text-2xl font-semibold text-emerald-600">${calculateTotalSessions(patients)}</p></div></div><p class="text-center text-gray-500 mt-8">Selecione um cliente na barra lateral para ver detalhes.</p>`; } }
    function calculateOverallAverageProgress(patient) { if (!patient?.sessionData?.length) return '--'; const interventionScores = patient.sessionData.filter(s => !(s.is_baseline || s.isBaseline) && typeof s.score === 'number').map(s => s.score); if (interventionScores.length === 0) return '--'; const totalScore = interventionScores.reduce((sum, score) => sum + score, 0); const average = totalScore / interventionScores.length; return average.toFixed(1); }
    function calculateTotalSessions(userPatients) { return userPatients.reduce((total, patient) => total + (patient.sessionData?.length || 0), 0); }

    // --- Modal Relatório Consolidado (Funções Mantidas, Geração PDF separada) ---
    function openConsolidatedReportModal() { if (!selectedPatient) { alert("Selecione um cliente."); return; } const printTitle = document.getElementById('consolidated-report-print-title'); const printClientName = document.getElementById('consolidated-report-client-name-print'); const printClientId = document.getElementById('consolidated-report-client-id-print'); const reportTitle = `Relatório Consolidado - ${selectedPatient.name}`; consolidatedReportTitle.textContent = reportTitle; if(printTitle) printTitle.textContent = reportTitle; if(printClientName) printClientName.textContent = `Cliente: ${selectedPatient.name}`; if(printClientId) printClientId.textContent = `ID: ${selectedPatient.id}`; renderConsolidatedCharts(selectedPatient); // Renderiza no modal para visualização
        consolidatedReportModal.classList.remove('hidden'); document.body.style.overflow = 'hidden'; }
    function closeConsolidatedReportModal() { consolidatedReportModal.classList.add('hidden'); consolidatedChartsContainer.innerHTML = ''; Object.values(consolidatedChartInstances).forEach(chart => chart.destroy()); consolidatedChartInstances = {}; document.body.style.overflow = ''; }
    function renderConsolidatedCharts(patient) { consolidatedChartsContainer.innerHTML = ''; Object.values(consolidatedChartInstances).forEach(chart => chart.destroy()); consolidatedChartInstances = {}; const assignedProgramIds = patient.assigned_program_ids || []; if (!assignedProgramIds?.length) { consolidatedChartsContainer.innerHTML = '<p class="text-center text-gray-500 py-6 col-span-full">Nenhum programa atribuído.</p>'; return; } const assignedProgramsDetails = allPrograms.filter(p => assignedProgramIds.includes(p.id)).sort((a, b) => a.title.localeCompare(b.title, 'pt-BR')); if (assignedProgramsDetails.length === 0) { consolidatedChartsContainer.innerHTML = '<p class="text-center text-gray-500 py-6 col-span-full">Detalhes dos programas não encontrados.</p>'; return; } assignedProgramsDetails.forEach((program, index) => { const chartId = `consolidated-chart-${index}`; const wrapper = document.createElement('div'); wrapper.className = 'consolidated-chart-wrapper border border-gray-200 rounded-md p-4 bg-gray-50 flex flex-col items-center shadow-sm print:border-none print:shadow-none print:bg-white print:break-inside-avoid'; wrapper.innerHTML = `<h4 class="text-sm font-medium text-gray-600 mb-2 text-center">${program.title} (${program.tag || 'N/A'})</h4><div class="w-full h-48 relative"> <canvas id="${chartId}"></canvas> </div><p class="no-data-message text-xs text-gray-500 italic mt-2 hidden">Nenhum dado.</p>`; consolidatedChartsContainer.appendChild(wrapper); renderSingleConsolidatedChart(patient, program.id, chartId); }); }
    function renderSingleConsolidatedChart(patient, programId, canvasId) { const canvas = document.getElementById(canvasId); const canvasContainer = canvas?.parentElement; const noDataMsg = canvasContainer?.nextElementSibling; if (!canvas || !canvasContainer || !noDataMsg) { console.warn(`Elementos do gráfico consolidado não encontrados para ${canvasId}`); return; } const sessionData = patient.sessionData?.filter(session => String(session.program_id || session.programId) === String(programId)).sort((a, b) => new Date(a.session_date || a.date) - new Date(b.session_date || b.date)).map(s => ({ ...s, score: parseFloat(s.score) })) || []; if (sessionData.length === 0) { noDataMsg.classList.remove('hidden'); canvasContainer.style.display = 'none'; return; } noDataMsg.classList.add('hidden'); canvasContainer.style.display = 'block'; const dates = sessionData.map(session => formatDate(session.session_date || session.date, 'short')); const scores = sessionData.map(session => session.score); const pointStyles = sessionData.map(session => session.is_baseline || session.isBaseline ? 'rect' : 'circle'); const pointBackgroundColors = sessionData.map(session => session.is_baseline || session.isBaseline ? '#fbbf24' : '#4f46e5'); const pointRadii = sessionData.map(session => session.is_baseline || session.isBaseline ? 3 : 2); const ctx = canvas.getContext('2d'); const primaryColor = '#4f46e5'; const baselineColor = '#fbbf24'; const primaryLight = 'rgba(79, 70, 229, 0.1)'; const textColor = '#4b5563'; const gridColor = '#e5e7eb'; consolidatedChartInstances[canvasId] = new Chart(ctx, { type: 'line', data: { labels: dates, datasets: [{ label: 'Pontuação (%)', data: scores, borderColor: primaryColor, backgroundColor: primaryLight, pointStyle: pointStyles, pointBackgroundColor: pointBackgroundColors, pointRadius: pointRadii, pointBorderColor: '#fff', fill: true, tension: 0.1, borderWidth: 1.5, pointHoverRadius: pointRadii.map(r => r + 2) }] }, options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true, max: 100, ticks: { color: textColor, font: { size: 9 } }, grid: { color: gridColor, drawBorder: false } }, x: { ticks: { color: textColor, font: { size: 9 }, maxRotation: 0, autoSkipPadding: 10 }, grid: { display: false } } }, plugins: { legend: { display: false }, tooltip: { backgroundColor: '#1f2937', titleColor: '#fff', bodyColor: '#fff', padding: 8, cornerRadius: 3, displayColors: true, borderColor: (tooltipItem) => { const index = tooltipItem.tooltip.dataPoints[0].dataIndex; return sessionData[index]?.is_baseline || sessionData[index]?.isBaseline ? baselineColor : primaryColor; }, borderWidth: 1, callbacks: { title: (tooltipItems) => { const index = tooltipItems[0].dataIndex; if(index < 0 || index >= sessionData.length) return ''; const session = sessionData[index]; const prefix = session.is_baseline || session.isBaseline ? '[LB] ' : ''; return `${prefix}${formatDate(session.session_date || session.date)}`; }, label: (context) => `Pont.: ${context.parsed.y}%`, labelColor: function(context) { const index = context.dataIndex; if(index < 0 || index >= sessionData.length) return { borderColor: primaryColor, backgroundColor: primaryColor }; const isBaseline = sessionData[index].is_baseline || sessionData[index].isBaseline; return { borderColor: isBaseline ? baselineColor : primaryColor, backgroundColor: isBaseline ? baselineColor : primaryColor, borderWidth: 2, borderRadius: isBaseline ? 0 : '50%' }; }, } } } } }); }

    // --- Geração de PDF (Grade e Registro Mantidos, Relatório Consolidado NOVO) ---
    function handlePrintConsolidatedReport() {
        if (!selectedPatient) {
            alert("Selecione um cliente primeiro.");
            return;
        }
        console.log("Iniciando geração do PDF do Relatório Consolidado...");
        generateConsolidatedReportPDF(selectedPatient);
    }

    async function generateConsolidatedReportPDF(patient) {
        if (!patient) return;
        const assignedProgramIds = patient.assigned_program_ids || [];
        if (assignedProgramIds.length === 0) {
            alert("Nenhum programa atribuído para gerar o relatório.");
            return;
        }

        const { jsPDF } = window.jspdf;
        const doc = new jsPDF({ orientation: 'portrait', unit: 'mm', format: 'a4' });
        const margin = 15;
        const pageWidth = doc.internal.pageSize.getWidth();
        const pageHeight = doc.internal.pageSize.getHeight();
        const contentWidth = pageWidth - margin * 2;
        let y = margin; // Posição Y inicial
        let pageCount = 1;

        // --- Função Auxiliar para Adicionar Cabeçalho ---
        const addHeader = (pdfDoc, patientData, currentPage) => {
            pdfDoc.setFontSize(16);
            pdfDoc.setFont(undefined, 'bold');
            pdfDoc.text("Relatório Consolidado de Progresso", pdfDoc.internal.pageSize.getWidth() / 2, y, { align: 'center' });
            y += 8;

            pdfDoc.setFontSize(10);
            pdfDoc.setFont(undefined, 'normal');
            pdfDoc.text(`Cliente: ${patientData.name}`, margin, y);
            pdfDoc.text(`ID: ${patientData.id}`, margin + contentWidth / 2, y);
            y += 5;
            pdfDoc.text(`Data Nasc.: ${patientData.dob ? formatDate(patientData.dob) : 'N/I'}`, margin, y);
            pdfDoc.text(`Diagnóstico: ${patientData.diagnosis || 'N/I'}`, margin + contentWidth / 2, y);
            y += 5;
            pdfDoc.text(`Gerado em: ${formatDate(new Date().toISOString().split('T')[0])}`, margin, y);
            y += 7;

            pdfDoc.setLineWidth(0.3);
            pdfDoc.line(margin, y, pageWidth - margin, y);
            y += 8;
        };

        // --- Função Auxiliar para Adicionar Rodapé ---
        const addFooter = (pdfDoc, currentPage, totalPages) => {
            pdfDoc.setFontSize(8);
            pdfDoc.setTextColor(100);
            const footerY = pdfDoc.internal.pageSize.getHeight() - margin / 1.5;
            pdfDoc.text(`Página ${currentPage} de ${totalPages}`, pdfDoc.internal.pageSize.getWidth() / 2, footerY, { align: 'center' });
            pdfDoc.setTextColor(0);
        };

        // --- Adiciona Cabeçalho da Primeira Página ---
        addHeader(doc, patient, pageCount);

        const assignedProgramsDetails = allPrograms
            .filter(p => assignedProgramIds.includes(p.id))
            .sort((a, b) => a.title.localeCompare(b.title, 'pt-BR'));

        // --- Loop pelos Programas para Adicionar Gráficos ---
        for (const program of assignedProgramsDetails) {
            const programTitle = `${program.title} (${program.tag || 'N/A'})`;
            const sessionData = patient.sessionData
                ?.filter(session => String(session.program_id || session.programId) === String(program.id))
                .sort((a, b) => new Date(a.session_date || a.date) - new Date(b.session_date || b.date))
                .map(s => ({ ...s, score: parseFloat(s.score) })) || [];

            const chartHeightMM = 70; // Altura fixa para cada gráfico em mm
            const titleHeightMM = 8; // Espaço estimado para o título
            const spaceBetweenMM = 8; // Espaço entre gráficos
            const requiredHeight = titleHeightMM + chartHeightMM + spaceBetweenMM;

            // Verifica se precisa de nova página ANTES de desenhar
            if (y + requiredHeight > pageHeight - margin) {
                addFooter(doc, pageCount, '{totalPages}'); // Adiciona rodapé antes de mudar
                doc.addPage();
                pageCount++;
                y = margin; // Reseta Y para o topo da nova página
                // Adiciona um cabeçalho simplificado ou completo na nova página, se desejar
                doc.setFontSize(10);
                doc.setFont(undefined, 'italic');
                doc.text(`Relatório Consolidado - ${patient.name} (Continuação)`, margin, y);
                y += 10;
            }

            // Adiciona Título do Programa
            doc.setFontSize(11);
            doc.setFont(undefined, 'bold');
            doc.setTextColor(50, 50, 50);
            doc.text(programTitle, margin, y);
            y += titleHeightMM;

            // Adiciona Gráfico (ou mensagem de 'sem dados')
            if (sessionData.length > 0) {
                try {
                    // Cria um canvas temporário para renderizar o gráfico
                    const tempCanvas = document.createElement('canvas');
                    tempCanvas.width = 600; // Largura maior para melhor resolução
                    tempCanvas.height = chartHeightMM * (600 / contentWidth); // Mantém proporção
                    const tempCtx = tempCanvas.getContext('2d');

                    // Configuração similar ao renderSingleConsolidatedChart, mas adaptada
                    const dates = sessionData.map(session => formatDate(session.session_date || session.date, 'short'));
                    const scores = sessionData.map(session => session.score);
                    const pointStyles = sessionData.map(session => session.is_baseline || session.isBaseline ? 'rect' : 'circle');
                    const pointBackgroundColors = sessionData.map(session => session.is_baseline || session.isBaseline ? '#fbbf24' : '#4f46e5');
                    const pointRadii = sessionData.map(session => session.is_baseline || session.isBaseline ? 3 : 2);
                    const primaryColor = '#4f46e5'; const baselineColor = '#fbbf24'; const primaryLight = 'rgba(79, 70, 229, 0.1)'; const textColor = '#333'; const gridColor = '#ddd';

                    const chartInstance = new Chart(tempCtx, {
                        type: 'line',
                        data: { labels: dates, datasets: [{ label: 'Pontuação (%)', data: scores, borderColor: primaryColor, backgroundColor: primaryLight, pointStyle: pointStyles, pointBackgroundColor: pointBackgroundColors, pointRadius: pointRadii, pointBorderColor: '#fff', fill: true, tension: 0.1, borderWidth: 1.5 }] },
                        options: {
                            responsive: false, // Importante: Não responsivo para tamanho fixo
                            animation: false, // Desabilita animação para captura rápida
                            devicePixelRatio: 2, // Aumenta resolução da imagem
                            scales: { y: { beginAtZero: true, max: 100, ticks: { color: textColor, font: { size: 10 } }, grid: { color: gridColor } }, x: { ticks: { color: textColor, font: { size: 10 } }, grid: { display: false } } },
                            plugins: { legend: { display: false }, tooltip: { enabled: false } } // Desabilita tooltip na imagem
                        }
                    });

                    // Espera um pequeno delay para garantir a renderização completa (pode não ser necessário com animation: false)
                    // await new Promise(resolve => setTimeout(resolve, 50));

                    const imageDataUrl = tempCanvas.toDataURL('image/png', 1.0); // Qualidade máxima
                    doc.addImage(imageDataUrl, 'PNG', margin, y, contentWidth, chartHeightMM);
                    y += chartHeightMM;

                    // Limpa a instância do gráfico temporário
                    chartInstance.destroy();

                } catch (chartError) {
                    console.error("Erro ao renderizar gráfico para PDF:", chartError);
                    doc.setFontSize(9);
                    doc.setTextColor(150, 0, 0);
                    doc.text("Erro ao gerar gráfico.", margin + 5, y + chartHeightMM / 2);
                    y += chartHeightMM;
                }
            } else {
                // Mensagem se não houver dados
                doc.setFontSize(9);
                doc.setTextColor(100);
                doc.text("Nenhum dado de sessão registrado para este programa.", margin + 5, y + chartHeightMM / 2);
                y += chartHeightMM; // Avança o Y mesmo sem gráfico
            }

            y += spaceBetweenMM; // Espaço antes do próximo gráfico

        } // Fim do loop pelos programas

        // --- Adiciona Rodapé em todas as páginas (com número total) ---
        const totalPages = doc.internal.getNumberOfPages();
        for (let i = 1; i <= totalPages; i++) {
            doc.setPage(i);
            addFooter(doc, i, totalPages);
        }

        // --- Salva o PDF ---
        try {
            const filename = `Relatorio_Consolidado_${patient.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`;
            doc.save(filename);
            console.log("PDF gerado com sucesso:", filename);
        } catch (error) {
            console.error("Erro ao salvar PDF:", error);
            alert("Erro ao gerar ou salvar o PDF.");
        }
    }

    // --- Geração de PDF (Grade e Registro - Mantidos como antes) ---
    function generateProgramGradePDF(patient) { if (typeof jspdf === 'undefined' || typeof jspdf.jsPDF === 'undefined') { console.error("jsPDF não carregado."); alert("Erro: PDF não disponível."); return; } if (!patient) { alert("Nenhum cliente selecionado."); return; } const assignedProgramIds = patient.assigned_program_ids || []; if (assignedProgramIds.length === 0) { alert("Nenhum programa atribuído para gerar a Grade."); return; } const { jsPDF } = window.jspdf; const doc = new jsPDF({ orientation: 'portrait', unit: 'mm', format: 'a4' }); const margin = 15; const pageWidth = doc.internal.pageSize.getWidth(); const pageHeight = doc.internal.pageSize.getHeight(); const contentWidth = pageWidth - margin * 2; let y = margin + 10; const lineHeight = 4.5; const titleFontSize = 16; const headerFontSize = 10; const sectionTitleFontSize = 12; const programTitleFontSize = 10; const programDetailFontSize = 9; const footerFontSize = 8; let pageCount = 1; const addWrappedText = (text, x, startY, maxWidth, options = {}) => { doc.setFontSize(options.fontSize || programDetailFontSize); doc.setFont(undefined, options.fontStyle || 'normal'); const lines = doc.splitTextToSize(text, maxWidth); doc.text(lines, x, startY); return startY + lines.length * lineHeight; }; const checkAndAddPage = (currentY, requiredHeight) => { if (currentY + requiredHeight > pageHeight - margin - 5) { addFooter(doc, pageCount, margin, pageHeight, footerFontSize, "{totalPages}"); doc.addPage(); pageCount++; currentY = margin; doc.setFontSize(headerFontSize); doc.setFont(undefined, 'italic'); doc.text(`Grade de Programas - ${patient.name} (Continuação - Pág. ${pageCount})`, margin, currentY); currentY += 10; doc.setFont(undefined, 'normal'); } return currentY; }; const addFooter = (pdfDoc, currentPage, docMargin, docPageHeight, fontSize, totalPagesPlaceholder) => { pdfDoc.setFontSize(fontSize); pdfDoc.setTextColor(100); pdfDoc.text(`Página ${currentPage} de ${totalPagesPlaceholder}`, pdfDoc.internal.pageSize.getWidth() / 2, docPageHeight - docMargin / 2, { align: 'center' }); pdfDoc.text(`Gerado em: ${formatDate(new Date().toISOString().split('T')[0])}`, docMargin, docPageHeight - docMargin / 2); pdfDoc.setTextColor(0); }; doc.setFontSize(titleFontSize); doc.setFont(undefined, 'bold'); doc.text(`Grade de Programas - ${patient.name}`, pageWidth / 2, y, { align: 'center' }); y += 8; doc.setFontSize(headerFontSize); doc.setFont(undefined, 'normal'); const dobText = `Nasc: ${patient.dob ? formatDate(patient.dob) : 'Não informado'}`; const diagText = `Diag: ${patient.diagnosis || 'Não informado'}`; doc.text(`ID: ${patient.id}`, margin, y); const dobWidth = doc.getTextWidth(dobText); doc.text(dobText, margin + (contentWidth / 3), y); doc.text(diagText, pageWidth - margin, y, { align: 'right' }); y += 10; doc.setLineWidth(0.2); doc.line(margin, y, pageWidth - margin, y); y += 8; doc.setFontSize(sectionTitleFontSize); doc.setFont(undefined, 'bold'); y = checkAndAddPage(y, lineHeight * 2); doc.text("Programas Atribuídos:", margin, y); y += 6; const assignedProgramsDetails = allPrograms.filter(p => assignedProgramIds.includes(p.id)).sort((a, b) => a.title.localeCompare(b.title, 'pt-BR')); if (assignedProgramsDetails.length === 0) { doc.setFontSize(programDetailFontSize); doc.setFont(undefined, 'normal'); y = checkAndAddPage(y, lineHeight); doc.text("Nenhum programa atribuído.", margin + 4, y); y += lineHeight; } else { assignedProgramsDetails.forEach(program => { let requiredHeight = 0; const titleTagText = `• ${program.title} (${program.tag || 'N/A'})`; doc.setFontSize(programTitleFontSize); doc.setFont(undefined, 'bold'); requiredHeight += doc.splitTextToSize(titleTagText, contentWidth - 4).length * lineHeight + 2; doc.setFontSize(programDetailFontSize); doc.setFont(undefined, 'normal'); const objectiveLines = doc.splitTextToSize(`Objetivo: ${program.objective || 'Não definido'}`, contentWidth - 8); requiredHeight += objectiveLines.length * lineHeight + 2; let criteriaLines = []; if (program.criteria_for_advancement) { criteriaLines = doc.splitTextToSize(`Critério de Avanço: ${program.criteria_for_advancement}`, contentWidth - 8); requiredHeight += criteriaLines.length * lineHeight + 2; } const firstStep = program.procedure && Array.isArray(program.procedure) && program.procedure.length > 0 ? program.procedure.find(step => step.term.toUpperCase() === 'SD') || program.procedure[0] : null; if (firstStep) { const procLines = doc.splitTextToSize(`Procedimento (Início - ${firstStep.term}): ${firstStep.description}`, contentWidth - 8); requiredHeight += procLines.length * lineHeight + 2; } requiredHeight += 4; y = checkAndAddPage(y, requiredHeight); y = addWrappedText(`• ${program.title} (${program.tag || 'N/A'})`, margin + 4, y, contentWidth - 4, { fontSize: programTitleFontSize, fontStyle: 'bold' }); y += 1; y = addWrappedText(`Objetivo: ${program.objective || 'Não definido'}`, margin + 8, y, contentWidth - 8, { fontSize: programDetailFontSize, fontStyle: 'normal' }); y += 1; if (program.criteria_for_advancement) { doc.setFont(undefined, 'italic'); y = addWrappedText(`Critério de Avanço: ${program.criteria_for_advancement}`, margin + 8, y, contentWidth - 8, { fontSize: programDetailFontSize - 1 }); doc.setFont(undefined, 'normal'); y += 1; } if (firstStep) { y = addWrappedText(`Procedimento (Início - ${firstStep.term}): ${firstStep.description}`, margin + 8, y, contentWidth - 8, { fontSize: programDetailFontSize, fontStyle: 'normal' }); y += 1; } y += 4; }); } const totalPages = doc.internal.getNumberOfPages(); for (let i = 1; i <= totalPages; i++) { doc.setPage(i); addFooter(doc, i, margin, pageHeight, footerFontSize, totalPages); } try { const filename = `Grade_Programas_${patient.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`; doc.save(filename); } catch (error) { console.error("Erro ao salvar PDF da Grade:", error); alert("Erro ao salvar PDF da Grade."); } }
    function generateWeeklyRecordSheetPDF(patient) { if (typeof jspdf === 'undefined' || typeof jspdf.jsPDF === 'undefined') { console.error("jsPDF não carregado."); alert("Erro: PDF não disponível."); return; } if (!patient) { alert("Nenhum cliente selecionado."); return; } const assignedProgramIds = patient.assigned_program_ids || []; if (assignedProgramIds.length === 0) { alert("Nenhum programa atribuído para gerar Folha de Registro."); return; } const { jsPDF } = window.jspdf; const doc = new jsPDF({ orientation: 'landscape', unit: 'mm', format: 'a4' }); const margin = 10; const pageWidth = doc.internal.pageSize.getWidth(); const pageHeight = doc.internal.pageSize.getHeight(); const contentWidth = pageWidth - margin * 2; let y = margin + 10; const titleFontSize = 14; const headerFontSize = 10; const tableHeaderFontSize = 9; const tableCellFontSize = 8; const footerFontSize = 8; const defaultRowHeight = 10; let pageCount = 1; const addCenteredWrappedText = (text, x, startY, cellWidth, cellHeight) => { doc.setFontSize(tableCellFontSize); doc.setFont(undefined, 'normal'); const lines = doc.splitTextToSize(text, cellWidth - 4); const textHeight = lines.length * (tableCellFontSize * 0.35); const textOffsetY = (cellHeight - textHeight) / 2 + (tableCellFontSize * 0.35); doc.text(lines, x + 2, startY + textOffsetY); return Math.max(defaultRowHeight, lines.length * 3.5 + 4); }; const drawTableHeader = (currentY) => { doc.setFontSize(tableHeaderFontSize); doc.setFont(undefined, 'bold'); doc.setDrawColor(0); doc.setLineWidth(0.2); doc.setFillColor(230, 230, 230); doc.rect(margin, currentY, contentWidth, defaultRowHeight, 'FD'); doc.setTextColor(0); const programColWidth = contentWidth * 0.45; const dayColWidth = (contentWidth - programColWidth) / 7; const textY = currentY + defaultRowHeight / 2 + (tableHeaderFontSize * 0.35 / 2); doc.line(margin + programColWidth, currentY, margin + programColWidth, currentY + defaultRowHeight); doc.text("Programa", margin + 2, textY); const days = ["Seg", "Ter", "Qua", "Qui", "Sex", "Sáb", "Dom"]; let currentX = margin + programColWidth; days.forEach(day => { doc.line(currentX, currentY, currentX, currentY + defaultRowHeight); doc.text(day, currentX + dayColWidth / 2, textY, { align: 'center' }); currentX += dayColWidth; }); return currentY + defaultRowHeight; }; const addFooter = (pdfDoc, currentPage, docMargin, docPageHeight, fontSize, totalPagesPlaceholder) => { pdfDoc.setFontSize(fontSize); pdfDoc.setTextColor(100); pdfDoc.text(`Página ${currentPage} de ${totalPagesPlaceholder}`, pdfDoc.internal.pageSize.getWidth() / 2, docPageHeight - docMargin / 2, { align: 'center' }); pdfDoc.text(`Gerado em: ${formatDate(new Date().toISOString().split('T')[0])}`, docMargin, docPageHeight - docMargin / 2); pdfDoc.setTextColor(0); }; doc.setFontSize(titleFontSize); doc.setFont(undefined, 'bold'); doc.text(`Folha de Registro Semanal - ${patient.name}`, pageWidth / 2, y, { align: 'center' }); y += 8; doc.setFontSize(headerFontSize); doc.setFont(undefined, 'normal'); doc.text(`ID: ${patient.id}`, margin, y); doc.text(`Semana de: ____ / ____ / ________`, pageWidth - margin, y, { align: 'right' }); y += 10; const programColWidth = contentWidth * 0.45; const dayColWidth = (contentWidth - programColWidth) / 7; y = drawTableHeader(y); const assignedProgramsDetails = allPrograms.filter(p => assignedProgramIds.includes(p.id)).sort((a, b) => a.title.localeCompare(b.title, 'pt-BR')); doc.setFontSize(tableCellFontSize); doc.setFont(undefined, 'normal'); doc.setTextColor(0); doc.setDrawColor(150); doc.setLineWidth(0.1); assignedProgramsDetails.forEach(program => { const numTrials = (typeof program.trials === 'number' && program.trials > 0) ? program.trials : 10; const trialCellWidth = dayColWidth / numTrials; const programText = `${program.title} (${program.tag || 'N/A'})`; const requiredHeight = addCenteredWrappedText(programText, margin, y, programColWidth, defaultRowHeight); if (y + requiredHeight > pageHeight - margin - 5) { addFooter(doc, pageCount, margin, pageHeight, footerFontSize, "{totalPages}"); doc.addPage(); pageCount++; y = margin; y = drawTableHeader(y); doc.setFontSize(tableCellFontSize); doc.setFont(undefined, 'normal'); doc.setTextColor(0); doc.setDrawColor(150); doc.setLineWidth(0.1); } doc.line(margin, y + requiredHeight, margin + contentWidth, y + requiredHeight); addCenteredWrappedText(programText, margin, y, programColWidth, requiredHeight); let currentX = margin + programColWidth; doc.line(currentX, y, currentX, y + requiredHeight); for (let i = 0; i < 7; i++) { let trialLineX = currentX; if (numTrials > 1) { for (let j = 1; j < numTrials; j++) { trialLineX += trialCellWidth; doc.line(trialLineX, y, trialLineX, y + requiredHeight); } } currentX += dayColWidth; if (i < 6) { doc.line(currentX, y, currentX, y + requiredHeight); } } doc.line(margin + contentWidth, y, margin + contentWidth, y + requiredHeight); y += requiredHeight; }); const totalPages = doc.internal.getNumberOfPages(); for (let i = 1; i <= totalPages; i++) { doc.setPage(i); addFooter(doc, i, margin, pageHeight, footerFontSize, totalPages); } try { const filename = `Folha_Registro_${patient.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`; doc.save(filename); } catch (error) { console.error("Erro ao salvar PDF da Folha de Registro:", error); alert("Erro ao salvar PDF."); } }

    // --- Funções Utilitárias (Mantida) ---
    function formatDate(dateString, format = 'long') { if (!dateString) return 'N/A'; let date; if (/^\d{4}-\d{2}-\d{2}/.test(dateString)) { date = new Date(dateString.split('T')[0] + 'T00:00:00'); } else { date = new Date(dateString); } if (isNaN(date.getTime())) { return 'Data inválida'; } const options = format === 'short' ? { day: '2-digit', month: '2-digit', year: '2-digit' } : { day: '2-digit', month: '2-digit', year: 'numeric' }; try { return date.toLocaleDateString('pt-BR', options); } catch (e) { console.error("Erro ao formatar data:", e, "Input:", dateString); return dateString; } }

    // --- Anotações (Mantida) ---
    async function saveNotes() { if (!selectedPatient || !authToken) { alert("Nenhum cliente selecionado."); return; } const newNotes = notesViewTextarea.value; console.log(`Salvando notas para paciente ${selectedPatient.id}`); try { const response = await fetch(`${API_BASE_URL}/patients/${selectedPatient.id}/notes`, { method: 'PUT', headers: { 'Authorization': `Bearer ${authToken}`, 'Content-Type': 'application/json', }, body: JSON.stringify({ generalNotes: newNotes }) }); if (response.ok) { alert("Anotações salvas!"); selectedPatient.general_notes = newNotes; saveNotesBtn.classList.add('bg-emerald-500', 'hover:bg-emerald-600'); saveNotesBtn.innerHTML = '<i class="fas fa-check mr-1"></i> Salvo!'; setTimeout(() => { saveNotesBtn.classList.remove('bg-emerald-500', 'hover:bg-emerald-600'); saveNotesBtn.innerHTML = '<i class="fas fa-save mr-1"></i> Salvar Anotações'; }, 1500); } else { const result = await response.json().catch(() => ({ errors: [{msg: response.statusText}] })); console.error('Erro ao salvar anotações:', result.errors?.[0]?.msg || response.statusText); alert(`Erro: ${result.errors?.[0]?.msg || 'Falha.'}`); } } catch (error) { console.error('Erro de rede ao salvar anotações:', error); alert("Erro de conexão."); } }

    // --- Inicia a aplicação ---
    initializeApp();

});
